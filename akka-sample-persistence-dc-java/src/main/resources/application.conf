akka {
  loglevel = INFO
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = cluster

    allow-java-serialization = no

    serializers {
      thumbs-up = "sample.persistence.multidc.ThumbsUpSerializer"
    }
    serialization-bindings {
      "sample.persistence.multidc.ThumbsUpCounter$Command" = thumbs-up
      "sample.persistence.multidc.ThumbsUpCounter$Event" = thumbs-up
      "sample.persistence.multidc.ThumbsUpCounter$State" = thumbs-up
    }
  }

  # For the sample, just bind to loopback and do not allow access from the network
  # the port is overridden by the logic in main class
  remote.artery.canonical.port = 0
  remote.artery.canonical.hostname = 127.0.0.1
  remote.artery.enabled = on

  remote.netty.tcp.hostname=127.0.0.1
  remote.netty.tcp.port=0

  cluster {
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:2551",
      "akka://ClusterSystem@127.0.0.1:2552"]

    # Needed when running many actor systems in the same JVM
    jmx.multi-mbeans-in-same-jvm = on

    downing-provider-class = "com.lightbend.akka.sbr.SplitBrainResolverProvider"
    split-brain-resolver.active-strategy = "keep-majority"
  }

  diagnostics.recorder.dir = "target/akka-diagnostics/"
}

# Akka Multi-DC config
akka {
  cluster {
    multi-data-center {
      self-data-center = "eu-west"
    }
  }

  persistence {
    snapshot-store.plugin = "cassandra-snapshot-store"

    multi-data-center {
      all-data-centers = ["eu-central", "eu-west"]

      # see https://developer.lightbend.com/docs/akka-commercial-addons/current/persistence-dc/index.html#speculative-replication-optimization
      speculative-replication.enabled = off

      # see https://developer.lightbend.com/docs/akka-commercial-addons/current/persistence-dc/cassandra.html#cross-reading
//      cross-reading-replication {
//        enabled = off
//        local-notification = off
//
//        # config when cross-reading-replication.local-notification = on
//        cassandra-journal {
//          eu-west {
//            contact-points = ["eu-west-node1", "eu-west-node2"]
//            keyspace = "akka_west"
//            local-datacenter = "eu-west"
//            data-center-replication-factors = ["eu-west:3"]
//          }
//          eu-central {
//            contact-points = ["eu-central-node1", "eu-central-node2"]
//            keyspace = "akka_central"
//            local-datacenter = "eu-central"
//            data-center-replication-factors = ["eu-central:3"]
//          }
//        }
//      }

    }
  }
}

cassandra-journal-multi-dc {
  contact-points = ["localhost"]
  log-queries = on

  #replication-strategy = "NetworkTopologyStrategy"
  #data-center-replication-factors = ["eu-west:3", "eu-central:3"]

  #local-datacenter = "eu-west"
  #local-datacenter = "eu-central"

  # enable in west when cross-reading.enabled = on
//  keyspace = "akka_west"
//  data-center-replication-factors = ["eu-west:3"]

  # enable in central when cross-reading.enabled = on
//  keyspace = "akka_central"
//  data-center-replication-factors = ["eu-central:3"]

  # Uncomment this when using cross-reading-replication.local-notification = on
//  notification {
//    keyspace = "akka_notification"
//    replication-strategy = "NetworkTopologyStrategy"
//    data-center-replication-factors = ["eu-west:3", "eu-central:3"]
//  }
}

cassandra-query-journal-multi-dc {
  contact-points = ["localhost"]
  #local-datacenter = "eu-west"
  #local-datacenter = "eu-central"
  log-queries = on
}

cassandra-snapshot-store {
  #replication-strategy = "NetworkTopologyStrategy"
  #data-center-replication-factors = ["eu-west:3", "eu-central:3"]
  #local-datacenter = "eu-west"
  #local-datacenter = "eu-central"
}



# Akka Management config: https://developer.lightbend.com/docs/akka-management/current/index.html
akka.management {
  http.hostname = "127.0.0.1"
  http.port = 19999
}
