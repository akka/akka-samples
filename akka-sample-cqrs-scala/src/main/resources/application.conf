akka {
  loglevel = DEBUG

  actor {
    provider = cluster

    serialization-bindings {
      "sample.cqrs.CborSerializable" = jackson-cbor
    }
  }

  # For the sample, just bind to loopback and do not allow access from the network
  # the port is overridden by the logic in main class
  remote.artery {
    canonical.port = 0
    canonical.hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = [
      "akka://Shopping@127.0.0.1:2551",
      "akka://Shopping@127.0.0.1:2552"
    ]

    roles = ["write-model", "read-model"]

    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  # use Cassandra to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "akka.persistence.cassandra.journal"
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
  }

}

# Configuration for akka-persistence-cassandra
akka.persistence.cassandra {
  events-by-tag {
    bucket-size = "Day"
    # for reduced latency
    eventual-consistency-delay = 200ms
    flush-interval = 50ms
    pubsub-notification = on
    first-time-bucket = "20200115T00:00"
  }

  query {
    refresh-interval = 2s
  }

  # don't use autocreate in production
  journal.keyspace-autocreate = on
  journal.tables-autocreate = on
  snapshot.keyspace-autocreate = on
  snapshot.tables-autocreate = on
}

datastax-java-driver {
  advanced.reconnect-on-init = on
}

akka.projection.cassandra.offset-store.keyspace = "akka_cqrs_sample"

event-processor {
  tag-prefix = "carts-slice"       // even processor tag prefix
  parallelism = 4                  // number of event processors
}

shopping.http.port = 0
shopping.askTimeout = 5 s


